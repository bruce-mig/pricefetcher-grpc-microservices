// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/service.proto

package pricefetcher_grpc_microservices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceFetcherClient is the client API for PriceFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceFetcherClient interface {
	FetchPrice(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	FetchPriceServerStreaming(ctx context.Context, in *SymbolsList, opts ...grpc.CallOption) (PriceFetcher_FetchPriceServerStreamingClient, error)
	FetchPriceBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (PriceFetcher_FetchPriceBidirectionalStreamingClient, error)
}

type priceFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceFetcherClient(cc grpc.ClientConnInterface) PriceFetcherClient {
	return &priceFetcherClient{cc}
}

func (c *priceFetcherClient) FetchPrice(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, "/PriceFetcher/FetchPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceFetcherClient) FetchPriceServerStreaming(ctx context.Context, in *SymbolsList, opts ...grpc.CallOption) (PriceFetcher_FetchPriceServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceFetcher_ServiceDesc.Streams[0], "/PriceFetcher/FetchPriceServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceFetcherFetchPriceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceFetcher_FetchPriceServerStreamingClient interface {
	Recv() (*PriceResponse, error)
	grpc.ClientStream
}

type priceFetcherFetchPriceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *priceFetcherFetchPriceServerStreamingClient) Recv() (*PriceResponse, error) {
	m := new(PriceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *priceFetcherClient) FetchPriceBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (PriceFetcher_FetchPriceBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceFetcher_ServiceDesc.Streams[1], "/PriceFetcher/FetchPriceBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceFetcherFetchPriceBidirectionalStreamingClient{stream}
	return x, nil
}

type PriceFetcher_FetchPriceBidirectionalStreamingClient interface {
	Send(*PriceRequest) error
	Recv() (*PriceResponse, error)
	grpc.ClientStream
}

type priceFetcherFetchPriceBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *priceFetcherFetchPriceBidirectionalStreamingClient) Send(m *PriceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *priceFetcherFetchPriceBidirectionalStreamingClient) Recv() (*PriceResponse, error) {
	m := new(PriceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceFetcherServer is the server API for PriceFetcher service.
// All implementations must embed UnimplementedPriceFetcherServer
// for forward compatibility
type PriceFetcherServer interface {
	FetchPrice(context.Context, *PriceRequest) (*PriceResponse, error)
	FetchPriceServerStreaming(*SymbolsList, PriceFetcher_FetchPriceServerStreamingServer) error
	FetchPriceBidirectionalStreaming(PriceFetcher_FetchPriceBidirectionalStreamingServer) error
	mustEmbedUnimplementedPriceFetcherServer()
}

// UnimplementedPriceFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedPriceFetcherServer struct {
}

func (UnimplementedPriceFetcherServer) FetchPrice(context.Context, *PriceRequest) (*PriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPrice not implemented")
}
func (UnimplementedPriceFetcherServer) FetchPriceServerStreaming(*SymbolsList, PriceFetcher_FetchPriceServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchPriceServerStreaming not implemented")
}
func (UnimplementedPriceFetcherServer) FetchPriceBidirectionalStreaming(PriceFetcher_FetchPriceBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchPriceBidirectionalStreaming not implemented")
}
func (UnimplementedPriceFetcherServer) mustEmbedUnimplementedPriceFetcherServer() {}

// UnsafePriceFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceFetcherServer will
// result in compilation errors.
type UnsafePriceFetcherServer interface {
	mustEmbedUnimplementedPriceFetcherServer()
}

func RegisterPriceFetcherServer(s grpc.ServiceRegistrar, srv PriceFetcherServer) {
	s.RegisterService(&PriceFetcher_ServiceDesc, srv)
}

func _PriceFetcher_FetchPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceFetcherServer).FetchPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PriceFetcher/FetchPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceFetcherServer).FetchPrice(ctx, req.(*PriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceFetcher_FetchPriceServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SymbolsList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceFetcherServer).FetchPriceServerStreaming(m, &priceFetcherFetchPriceServerStreamingServer{stream})
}

type PriceFetcher_FetchPriceServerStreamingServer interface {
	Send(*PriceResponse) error
	grpc.ServerStream
}

type priceFetcherFetchPriceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *priceFetcherFetchPriceServerStreamingServer) Send(m *PriceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PriceFetcher_FetchPriceBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PriceFetcherServer).FetchPriceBidirectionalStreaming(&priceFetcherFetchPriceBidirectionalStreamingServer{stream})
}

type PriceFetcher_FetchPriceBidirectionalStreamingServer interface {
	Send(*PriceResponse) error
	Recv() (*PriceRequest, error)
	grpc.ServerStream
}

type priceFetcherFetchPriceBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *priceFetcherFetchPriceBidirectionalStreamingServer) Send(m *PriceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *priceFetcherFetchPriceBidirectionalStreamingServer) Recv() (*PriceRequest, error) {
	m := new(PriceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceFetcher_ServiceDesc is the grpc.ServiceDesc for PriceFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PriceFetcher",
	HandlerType: (*PriceFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchPrice",
			Handler:    _PriceFetcher_FetchPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchPriceServerStreaming",
			Handler:       _PriceFetcher_FetchPriceServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchPriceBidirectionalStreaming",
			Handler:       _PriceFetcher_FetchPriceBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
